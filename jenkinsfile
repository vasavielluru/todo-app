pipeline{
    agent any;
     tools{
       maven 'maven'
       jdk 'jdk'
   }
   
        stage('Maven package'){
            steps{
                sh 'mvn -f app/pom.xml package'

            }
        }
        /*stage('sonar analysis'){
            steps{
                withSonarQubeEnv('sonarQube'){
                    sh 'mvn -f app/pom.xml sonar:sonar'
                }
            }
        }
        stage('deploy to artifactor'){
            steps{
                rtUpload (
            serverId: 'ARTIFACTORY-SERVER',
            spec: '''{
                 "files": [
                             {
                                "pattern": "app/target/*.war",
                                "target": "art-doc-dev-loc/todo-app/"
                            }
                        ]
            }''',
            )

            }
        }
        stage('download artifact'){
            steps{
                 rtDownload (
                 serverId: "ARTIFACTORY-SERVER",
                spec:"""{
                     "files": [
                                {
                                    "pattern": "art-doc-dev-loc/todo-app/**",
                                    "target": "app/artifacts/"      
                                }
                            ]
              }"""
            )
            
            }
        }*/

        
        stage('Docker build'){
            steps{
               
                    sh 'docker image prune -a --force'
                    sh 'docker-compose build'
                
                
            }
        }
        stage('Pushing images to docker hub'){
            steps{
            withCredentials([string(credentialsId: 'dockerHubPWD', variable: 'dockerHubPWD')]) {
            // some block

                

             
                   sh "docker login -u 1062176 -p ${dockerHubPWD}"

                }
                sh "docker commit cisample_app_1 1062176/todo-app:v${env.BUILD_ID}"
                sh "docker push 1062176/todo-app:v${env.BUILD_ID}"

            }
        }
        stage('deploying it to kubernetes'){
            steps{
                sh 'chmod +x change-tag.sh'
                sh """./change-tag.sh v${env.BUILD_ID}"""
                sh 'cat k8s/api-deployment.yaml'
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kube-azure', namespace: '', serverUrl: 'https://knowing-hermit-k8s-acb538fe.hcp.westus2.azmk8s.io') {
                                // some block
                    sh 'kubectl apply -f k8s/database-deployment.yaml'
                    
                }
                sleep(120)
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kube-azure', namespace: '', serverUrl: 'https://knowing-hermit-k8s-acb538fe.hcp.westus2.azmk8s.io') {
                                // some block
                    sh 'kubectl apply -f k8s/api-deployment.yaml'
                    sh 'kubectl get pods'
                    sh 'kubectl get svc'
                    
                }

            }
        }
    

    }

}
